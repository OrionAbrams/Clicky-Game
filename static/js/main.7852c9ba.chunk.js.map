{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Navbar/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","clickedIt","id","alt","name","src","image","Wrapper","children","Title","Navbar","bestScore","href","App","state","friends","score","maxScore","chosenId","friendArray","friendClickedId","filter","friend","i","length","alreadyClicked","alert","_this","setState","console","log","_this2","this","shuffledImages","array","j","Math","floor","random","temp","shuffleArray","components_Navbar","components_Wrapper","components_Title","map","components_FriendCard","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"isCAaeA,MAVf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAML,EAAMM,UAAUN,EAAMO,KAAKH,UAAU,WAAWI,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,iBCAzFC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,WCYvBE,ICSXC,EDTWD,EAbf,SAAgBf,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAea,KAAK,KAAjC,gBACahB,EAAAC,EAAAC,cAAA,WACVH,EAAMa,uBC4FEK,6MAzEbC,MAAQ,CACNC,UACAC,MAAO,EACPC,SAAU,KAGZhB,UAAY,SAAAC,GAMV,IAJA,IAGIgB,EAHAC,EAAcJ,EAEdK,EADgBD,EAAYE,OAAO,SAAAC,GAAM,OAAIA,EAAOpB,KAAOA,IAC3B,GAAGA,GAE9BqB,EAAI,EAAGA,EAAIJ,EAAYK,OAAQD,IAClCH,IAAoBD,EAAYI,GAAGrB,KACrCgB,EAAWK,GAIf,GAAIR,EAAQG,GAAUO,eAAgB,CACpCC,MAAM,aACN,IAASH,EAAI,EAAGA,EAAIR,EAAQS,OAAQD,IAClCR,EAAQQ,GAAGE,gBAAiB,EAE9BE,EAAKC,SAAS,CACZb,UACAC,MAAO,SAITa,QAAQC,IAAIH,EAAKb,MAAME,OAEnBW,EAAKb,MAAME,OAASW,EAAKb,MAAMG,WAEf,MADlBN,EAAYgB,EAAKb,MAAME,MAAQ,IAE7BU,MAAM,YAGRG,QAAQC,IAAInB,IAGdgB,EAAKC,SAAS,CACZb,QAASA,EAAQG,GAAUO,gBAAiB,EAC5CT,MAAOW,EAAKb,MAAME,MAAQ,EAC1BC,SAAUN,6EAOP,IAAAoB,EAAAC,KACHC,EAhER,SAAsBC,GAEpB,IADA,IAAIX,EAAIW,EAAMV,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAMY,EAAIC,KAAKC,MAAMD,KAAKE,UAAYf,EAAI,IACpCgB,EAAOL,EAAMX,GACnBW,EAAMX,GAAKW,EAAMC,GACjBD,EAAMC,GAAKI,EAEb,OAAOL,EAwDgBM,CAAazB,GAClC,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2C,EAAD,eAAgBT,KAAKlB,MAAME,MAA3B,eAA8CgB,KAAKlB,MAAMG,UACzDrB,EAAAC,EAAAC,cAAC4C,EAAD,KAEE9C,EAAAC,EAAAC,cAAC6C,EAAD,iFACCV,EAAeW,IAAI,SAAAtB,GAAM,OACxB1B,EAAAC,EAAAC,cAAC+C,EAAD,CACE5C,UAAW8B,EAAK9B,UAChBC,GAAIoB,EAAOpB,GACX4C,IAAKxB,EAAOpB,GACZE,KAAMkB,EAAOlB,KACbE,MAAOgB,EAAOhB,mBAjEVyC,mBCrBlBC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.7852c9ba.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img onClick={() => props.clickedIt(props.id)} className=\"click-me\" alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h2 className=\"title\">{props.children}</h2>;\n}\n\nexport default Title;\n","import React from \"react\";\n// import \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-fixed-top navbar-dark bg-dark\">\n    <a className=\"navbar-brand\" href=\"#\">\n    Clicky Game! <br></br>\n      {props.children}\n    </a>\n  </nav>\n);\n}\n\n\n\nexport default Navbar;\n","// pseudocode for getting functionality of game to work:\n// render the cards randomly instead of in order to begin\n// on click of a friend card, get the card's id, change clicked = true on that card\n// if clicked was already true, you lose and reset game\n// else ++ score and re-render the cards (make new state)\n\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Navbar from \"./components/Navbar\"\nimport friends from \"./friends.json\";\n\n//totally found this on the internet, too complicated for me to figure out how to shuffle\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nvar bestScore\nclass App extends Component {\n  state = {\n    friends,\n    score: 0,\n    maxScore: 0\n  };\n\n  clickedIt = id => {\n\n    let friendArray = friends\n    let friendClicked = friendArray.filter(friend => friend.id === id)\n    let friendClickedId = friendClicked[0].id\n    let chosenId\n    for (var i = 0; i < friendArray.length; i++) {\n      if (friendClickedId === friendArray[i].id) {\n        chosenId = i\n      }\n    }\n\n    if (friends[chosenId].alreadyClicked) {\n      alert(\"You Lose!\")\n      for (var i = 0; i < friends.length; i++) {\n        friends[i].alreadyClicked = false\n      }\n      this.setState({\n        friends,\n        score: 0\n      })\n    }\n    else {\n      console.log(this.state.score)\n\n      if (this.state.score >= this.state.maxScore) {\n        bestScore = this.state.score + 1\n        if (bestScore === 12) {\n          alert(\"You win!\")\n          // doesn't reset score here, wasn't working so i left out. have to refresh. (homework example also doesn't reset)\n        }\n        console.log(bestScore)\n      }\n\n      this.setState({\n        friends: friends[chosenId].alreadyClicked = true,\n        score: this.state.score + 1,\n        maxScore: bestScore\n      });\n    }\n\n\n  };\n\n  render() {\n    let shuffledImages = shuffleArray(friends);\n    return (\n      <div>\n        <Navbar>Score: {this.state.score} Max Score: {this.state.maxScore}</Navbar>\n        <Wrapper>\n\n          <Title>Click on an image to earn points, but don't click on any more than once!</Title>\n          {shuffledImages.map(friend => (\n            <FriendCard\n              clickedIt={this.clickedIt}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}